/* jshint node: true */
var http = require("http");
var https = require("https");
var connect = require("connect");
var static = require("serve-static");
var fs = require("fs");

/*
 * the global server
 */

var serv;

/*
 * track if server is running
 */

var serv_running = false;

/*
 * init creates a new connect app serving static files at root
 *
 * @param {String} root
 * @return {Connect}
 * @api private
 */

function init(root) {
  var app = connect();
  app.use(static(root));

  return app;
}

/*
 * start starts a server
 *
 * @param {Server} server (http(s) server)
 * @param {Object} opts
 * @param {Function} callback
 * @return {Server}
 * @api private
 */

function start(server, opts, callback) {
  opts.port = opts.port || 8080;
  opts.host = opts.host || "localhost";

  return server.listen(opts.port, opts.host, function() {
    serv_running = true;

    if ("function" === typeof callback) {
      callback.apply(null, arguments);
    }
  });
}

/*
 * ssl option
 */

var ssl = false;

/*
 * secure sets the ssl option
 *
 * @param {Object} opts
 * @return {exports}
 */

exports.secure = function(opts) {
  ssl = {
    key:  fs.readFileSync(opts.key),
    cert: fs.readFileSync(opts.cert)
  };

  return exports;
};

/*
 * newServer creates a server from a handle
 *
 * @param {handle} h
 * @return {Server} (http or https)
 * @api private
 */

function newServer(h) {
  if (!!ssl) {
    return https.createServer(ssl, h);
  }

  return http.createServer(h);
}

/*
 * start creates and starts an http server
 *
 * @param {Object} opts
 * @param {Function} callback (server start callback)
 * @return {Server} (reference to the global app)
 * @api public
 */

exports.start = function(opts, callback) {
  if (!!serv) {
    throw new Error("a server is already started");
  }

  serv = newServer(init(opts.root));
  return start(serv, opts, callback);
};

/*
 * reset clears the serve
 *
 * @api public
 */

var reset = exports.reset = function() {
  if (serv_running) {
    throw new Error("a server is still running");
  }

  ssl = false;
  serv = undefined;
};

/*
 * stop stops the global serv
 *
 * @param {Function} callback
 * @api public
 */

exports.stop = function(callback) {
  serv.close(function() {
    serv_running = false;
    reset();

    if ("function" === typeof callback) {
      callback.apply(null, arguments);
    }
  });
};
