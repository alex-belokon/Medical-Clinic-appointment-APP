/* jshint node: true */
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

var assert = require("chai").assert;
var request = require("supertest");

var serv = require("..");

describe("gulp-serv", function() {
  it("serves static files", function(done) {
    serv.start({
      root: __dirname+"/app",
      port: 1337
    }, function() {
      request("http://localhost:1337")
      .get("/")
      .expect(200, "Hello World!\n")
      .end(function() {
        serv.stop(done);
      });
    });
  });

  it("can https", function(done) {
    var ssl = {
      key:  __dirname+"/../ssl/dev-key.pem",
      cert: __dirname+"/../ssl/dev-cert.pem"
    };

    serv.secure(ssl).start({
      root: __dirname+"/app",
      host: "127.0.0.1",
      port: 8000
    }, function() {
      request("https://127.0.0.1:8000")
      .get("/")
      .expect(200, "Hello World!\n")
      .end(function() {
        serv.stop(done);
      });
    });
  });

  it("throws if a server is already started", function(done) {
    serv.start({
      root: __dirname+"/app",
      port: 1341
    }, function() {
      assert.throws(function() {
        serv.start({
          root: __dirname+"/app",
          port: 1342
        });
      }, "a server is already started");

      serv.stop(done);
    });
  });

  it("throws if reset is called while server is running", function(done) {
    serv.start({
      root: __dirname+"/app",
      port: 1343
    }, function() {
      assert.throws(serv.reset, "a server is still running");

      serv.stop(done);
    });
  });
});
